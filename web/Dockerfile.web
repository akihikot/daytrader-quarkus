########################################
# Build Image
########################################
FROM maven:3.6-jdk-8-slim as build

WORKDIR /build

COPY commons/pom.xml commons/
COPY web/pom.xml app/

RUN mvn -f commons/pom.xml -B de.qaware.maven:go-offline-maven-plugin:1.2.5:resolve-dependencies
RUN mvn -f app/pom.xml -B de.qaware.maven:go-offline-maven-plugin:1.2.5:resolve-dependencies

COPY web/src app/src
COPY commons/src commons/src

RUN mvn -f commons/pom.xml clean install
RUN mvn -f app/pom.xml clean package

########################################
# Production Image
########################################
##
##  Use debian base image; instead of linux alpine -- it includes bash
##
FROM openjdk:8-jre
##
##  Sets the author field of the generated image
##
MAINTAINER Donald Vines <donald_vines@hotmail.com>
##
##  Declare Docker ARGs whose values are set when building the image; but they are not available to the container
##
##  1.  App/WAR Name & Version
ARG APP_VERSION=4.0.0
##  2.  Exposed Port
ARG EXPOSE_PORT=8080

##
##  Set Docker ENV Values that are not only available when building the image, but also to the running container
##
##  1.  Tomcat Variables
ENV SERVER_PORT=${EXPOSE_PORT}
ENV SERVER_PORT_HTTPS=${EXPOSE_PORT}
ENV JVM_OPTS=
##  2.  Routing Variables
ENV DAYTRADER_GATEWAY_SERVICE=http://daytrader-gateway:8080
##  3.  Logging Variables
ENV DAYTRADER_LOG_FILENAME=daytrader.log
ENV DAYTRADER_LOG_LEVEL=TRACE
ENV DAYTRADER_LOG_APPENDER=ConsoleAppender

##
##  Run the application in the container
##
##  1.  Setup the JAVA_OPTS for the application
# ENV JAVA_OPTS="-Djavax.net.ssl.trustStore=/var/ssl/daytrader/truststore.jks -Djavax.net.ssl.trustStorePassword=password"
ENV JAVA_OPTS=""
##  2.  Add the WAR to the container
ARG WAR_FILE=/build/app/target/web-1.0.0-SNAPSHOT.war
COPY --chown=1001 --from=build ${WAR_FILE} app.war
##  3.  Start the executable WAR
ENTRYPOINT exec java ${JVM_OPTS} $JAVA_OPTS -jar app.war
